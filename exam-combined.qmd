---
title: "rbtl-fs25 end-of-semester exam"
subtitle: "Combined Sections"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  echo: true
  warning: false
editor_options: 
  chunk_output_type: console
---

# Section 01

## Points

The maximum number of points for this section is: **11 out of 54**. The number of points for each task is shown in parenthesis next to the task number.

```{r}
library(tidyverse)
```

```{r}
generation <- read_csv("data/what-a-waste/waste-generation.csv")
dictionary <- read_csv("data/what-a-waste/dictionary.csv")
```

## Task 1.1 (1)

1.  Explore the dictionary data object to learn more about the data.

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 1.2 (1)

1.  Use the `filter()` with the `generation` data object to remove all NAs from `waste_generation` and `population` columns.

2.  Keep only cities with population greater than 100,000.

3.  Store the result as a new object in your environment with the name `generation_filtered`.

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 1.3 (2)

1.  Use the `mutate()` function to add a new column to `generation_filtered` that is the municipal solid waste generation per person in kg/year. Name the column `waste_per_capita_kg_year`.

2.  Use the pipe operator to add another line of code which uses the `relocate()` function to move the `waste_per_capita_kg_year` after the `country` column.

3.  Use the pipe operator to add another line of code which uses the `select()` function to remove the `population` column.

4.  Store the result as a new object in your environment with the name `waste_per_capita`.

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 1.4 (2)

1.  Starting with `waste_per_capita`, return the 10 cities with the lowest municipal solid waste generation per capita.

2.  Use the pipe operator to add another line of code, then use a function you have learnt in the course to display a formatted version of the returned dataframe from the previous step.

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 1.5 (5)

1.  Use the data stored in `waste_per_capita` to prepare a violin- and jitterplot that displays income on the x-axis and municipal solid waste generation per capita on the y-axis.

2.  Add a fill aesthetic for the income categories.

3.  Set the width of the jitter to a value of 0.3.

4.  Set the transparency for the points in the jitter to a value of 0.6.

5.  Set the size of the points in the jitter to a value of 1.5.

6.  Set the transparency for the violin plot to a value of 0.8.

7.  Change the fill palette to colors of your choice.

8.  Add appropriate axis labels and a title to the plot.

```{r}


```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

# Section 02

## Points

The maximum number of points for this section is: **10 out of 54**. The number of points for each task is shown in parenthesis next to the task number.

```{r}
treatment <- read_csv("data/what-a-waste/waste-treatment.csv")
```

## Task 2.1 (0.5)

1.  Explore the treatment data object using functions taught during the course.

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 2.2 (3)

The `treatment` data does not follow tidy data principles. It is in a wide format rather than in a long format and shows different types of waste treatment in different columns, which could be one column with the type of treatment and another column with the value of the treatment.

1.  Use functions taught in the course to create a new object that follows tidy data principles.

2.  Remove NAs from the data and keep only treatment values greater than 0.

3.  Store the result as a new object in your environment with the name `treatment_tidy`.

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 2.3 (1)

1.  Starting with the `treatment_tidy` data object, use functions taught during the course to answer the following question:

How many countries are covered in this dataset?

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 2.4 (3)

1.  Starting with the `treatment_tidy` data object, use functions taught during the course to answer the following question:

Which country has the highest number of cities in the dataset, and how many cities is that?

```{r}


```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 2.5 (3.5)

1.  Starting with the `treatment_tidy` data object, use functions taught during the course to answer the following questions:

-   How many categories of waste treatment are there in the dataset?
-   How many categories are related to landfill? (Requirement: use `str_detect()` to identify them)
-   In how many cities is at least 50% of waste sent to a controlled landfill?

```{r}

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

# Section 03

## Points

The maximum number of points for this section is: **11 out of 54**. The number of points for each task is shown in parenthesis next to the task number.

```{r}
generation <- read_csv("data/what-a-waste/waste-generation.csv")
treatment_long <- read_csv("data/what-a-waste/treatment-long.csv")
```

## Task 3.2 (1)

The following code performs a join operation to combine the `treatment_long` and `generation` data objects based on the common columns `country`, `city`, and `income_id`. The result is stored in a new data object called `treatment_generation`.

1. Run the code below to perform the join operation.

2. Explore the resulting `treatment_generation` data object and think about the content of the `value` column.

```{r}

treatment_generation <- treatment_long |> 
  left_join(generation, by = c("country", "city", "income_id"))

```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 3.3 (10)

This task requires you to analyze waste treatment data through multiple steps. You may create intermediate data objects if needed.

### Background Information

The `value` column in the `treatment_generation` data represents the percentage of waste that receives each treatment type. This percentage applies proportionally to both the waste generation AND the population figures.

### Your Task: Answer Three Questions

**Step 1: Data Preparation** First, create a comprehensive dataset that:

-   Calculates actual tons of waste for each treatment type (using percentages from `value` column in combination with `waste_generation`)

-   Adjusts population figures proportionally to match the treatment percentages

-   Groups data by country and treatment type

-   Summarizes total waste and population for each country-treatment combination

-   Calculate per capita waste generation in kg/day

**Question 1:** Using your prepared data, determine how many tons of waste per year are openly dumped in Sri Lanka and Bhutan combined.


```{r}


```

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

# Section 04

## Points

The maximum number of points for this section is: **12 out of 54**. The number of points for each task is shown in parenthesis next to the task number.

```{r}
treatment_mean <- read_csv("data/what-a-waste/treatment-mean.csv")
```

## Task 4.1 (3)

Starting with the `treatment_mean` data object, use functions taught during the course to complete the following task:

1.  Reproduce the table that you see as an image below when you render the report and view the output in your Viewer tab in the bottom right window.

```{r}


```

![](img/tbl-01-treatment-by-income-mean.png)

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

## Task 4.2 (9)

1.  Starting with the `treatment_mean` data object, use functions taught during the course to complete the following task:

Reproduce the plot that you see as an image below when you render the report and view the output in your Viewer tab in the bottom right window.

**Hints:**

-   The color palette is for qualitative data types and is called "Paired". It is originally derived from from https://colorbrewer2.org/

-   Wondering about the order of the 4 individual plots? Remember how we create factors?

```{r}

```

![](img/fig-01-treatment-by-income-mean.png)

```
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
```

---

Last complete render: `r Sys.time()` at timezone `r Sys.timezone()`.