---
title: "rbtl-fs25 end-of-semester exam"
subtitle: "Section 01"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  echo: true
  warning: false
editor_options: 
  chunk_output_type: console
---

# Points

The maximum number of points for this section is: **12 out of 53**. The number of points for each task is shown in parenthesis next to the task number.

# Task 1.0 (0.5)

1.  Render the document and fix any errors.

```{r}
library(tidyverse)
```

```{r}
generation <- read_csv("data/what-a-waste/waste-generation.csv")
dictionary <- read_csv("data/what-a-waste/dictionary.csv")
```

# Task 1.1 (1)

1.  Explore the dictionary data object to learn more about the data.

```{r}

```

# Task 1.2 (1)

1.  Use the `filter()` with the `generation` data object to remove all NAs from `waste_generation` and `population` columns. 

2. Keep only cities with population greater than 100,000.

3.  Store the result as a new object in your environment with the name `generation_filtered`.

```{r}

```

# Task 1.3 (2)

1.  Use the `mutate()` function to add a new column to `generation_filtered` that is the municipal solid waste generation per person in kg/year. Name the column `waste_per_capita_kg_year`.

2.  Use the pipe operator to add another line of code which uses the `relocate()` function to move the `waste_per_capita_kg_year` after the `country` column.

3.  Use the pipe operator to add another line of code which uses the `select()` function to remove the `population` column.

4.  Store the result as a new object in your environment with the name `waste_per_capita`.

```{r}

```

# Task 1.4 (2)

1.  Starting with `waste_per_capita`, return the 10 cities with the lowest municipal solid waste generation per capita.

2.  Use the pipe operator to add another line of code, then use a function you have learnt in the course to display a formatted version of the returned dataframe from the previous step.

```{r}

```

# Task 1.5 (5)

1.  Use the data stored in `waste_per_capita` to prepare a violin- and jitterplot that displays income on the x-axis and municipal solid waste generation per capita on the y-axis.

2.  Add a fill aesthetic for the income categories.

3.  Set the width of the jitter to a value of 0.3.

4.  Set the transparency for the points in the jitter to a value of 0.6.

5.  Set the size of the points in the jitter to a value of 1.5.

6.  Set the transparency for the violin plot to a value of 0.8.

7.  Change the fill palette to colors of your choice.

8.  Add appropriate axis labels and a title to the plot.

```{r}


```

# Task 1.6 - Hand-in (0.5)

1.  Render the document and fix any errors.

Last complete render: `r Sys.time()` at timezone `r Sys.timezone()`.
